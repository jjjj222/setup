"------------------------------------------------------------------------------
"   vundle
"------------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
"set rtp+=~/.vim/bundle/vundle
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Nerd Tree
Plugin 'scrooloose/nerdtree'

" All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"------------------------------------------------------------------------------
"   start
"------------------------------------------------------------------------------
syntax on
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set completeopt-=preview

" disable auto comment
set formatoptions-=cro

set nocompatible
set tags+=~/build/lmc/src/tags,~/build/cpu/tags
set backspace=indent,eol,start
set whichwrap+=<,>,[,]
set history=50
"set visualbell t_vb=    " turn off error beep/flash
"set novisualbell    " turn off visual bell

" auto complete for file name "
set wildmode=longest,list
set wildmenu

if has('persistent_undo')
    "set undofile
    set undodir=~/.vim_tmp/undo//
endif
set backupdir=~/.vim_tmp/backup//
set directory=~/.vim_tmp/swp//
set viminfo+=n~/.vim_tmp/viminfo
"set clipboard=unnamed

"------------------------------------------------------------------------------
"   maps
"------------------------------------------------------------------------------
" enhance map "
let mapleader = ","

nmap    <C-g>       :tab split<CR> :Grep <cword> *.*<CR>
nmap    <C-h>       :tab split<CR> :Grep <cword> *.h<CR>
"nmap    <C-f>       <ESC>
"vmap    <C-f>       <ESC>
"imap    <C-f>       <ESC>
"nnoremap <C-d> ^<C-v>
" nmap <leader>g :Grep <cword> %<CR>
nmap    <F10>       :cclose<CR>
nmap    <F11>       :cprev<CR>
nmap    <F12>       :cnext<CR>

"nmap <F9> :TlistToggle<CR>
"nmap    <F9>        :VCSAnnotate<CR>
nmap    <F9>        :NERDTreeToggle<CR>

nmap    <leader>e   :tabnew ~/.vimrc<CR>
nmap    <leader>s   :source ~/.vimrc<CR>
nmap    <leader>o   :tabnew <cWORD><CR>
nmap    <leader>m   :marks<CR>

" plain text"
vmap    <C-d>       :call MakeAsComment()<CR><ESC>
vmap    <C-g>       :call MakeMultiLineComment()<CR><ESC>
nmap    <leader>a   :call AddHeader()<CR><ESC>
nmap    <leader>d   A // TODO<ESC>
nmap    +           m`O<ESC>``
nmap    -           ddk

" save "
nmap    <C-s>       :w<Enter>
imap    <C-s>       <ESC>:w<Enter>

" copy/paste "
vmap    <C-c>       :w! ~/.vim_tmp/vim_clipboard<CR>
nmap    <C-v>       :r ~/.vim_tmp/vim_clipboard<CR>

" tabpage "
nmap    <leader>t   :tabs<CR>
nmap    <leader>l   :tab split<CR>
map     Q           :tabpre <Enter>
map     W           :tabnext <Enter>
nmap    <leader>0   :tabm0<CR>
nmap    <leader>1   :tabm1<CR>
nmap    <leader>2   :tabm2<CR>
nmap    <leader>3   :tabm3<CR>
nmap    <leader>4   :tabm4<CR>
nmap    <leader>5   :tabm5<CR>
nmap    <leader>6   :tabm6<CR>
nmap    <leader>7   :tabm7<CR>
nmap    <leader>8   :tabm8<CR>
nmap    <leader>9   :tabm<CR>

" ctags "
map     <C-\>       :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" folding "
nmap    <F1>        :set foldlevel=0<CR>
nmap    <F2>        :set foldlevel=1<CR>
nmap    <F3>        :set foldlevel=2<CR>
nmap    <F4>        :set foldlevel=3<CR>
nmap    <F5>        :set foldlevel=4<CR>
nmap    <F6>        :set foldlevel=5<CR>
nmap    <F7>        :set foldlevel=6<CR>
nmap    <F8>        :set foldlevel=100<CR>

" nerd tree "
nmap    <C-n>       :NERDTreeToggle<CR>
autocmd FileType nerdtree nmap <buffer> <CR> go
autocmd FileType nerdtree nmap <buffer> <right> o
autocmd FileType nerdtree nmap <buffer> <left> o

"------------------------------------------------------------------------------
"   tab/space
"------------------------------------------------------------------------------
if (&filetype == "make")
    set noexpandtab
else
    set expandtab
endif
set tabstop=4
set shiftwidth=4
" set softtabstop=4
highlight Tab           ctermbg=blue
match Tab /\t/
highlight TrailingSpace ctermbg=red
2match TrailingSpace /\s\+$/
"filetype on
"filetype indent on


"------------------------------------------------------------------------------
"   filetype setup
"------------------------------------------------------------------------------
au BufRead,BufNewFile cshrc         set filetype=csh
au BufRead,BufNewFile *.cpf         set filetype=cpf
au BufRead,BufNewFile *.upf         set filetype=upf
au BufRead,BufNewFile *.md          set filetype=markdown


"------------------------------------------------------------------------------
"   tabpage
"------------------------------------------------------------------------------
set showtabline=2 " always show
highlight TabLine       ctermfg=darkgrey    ctermbg=black
highlight TabLineFill   ctermfg=black       ctermbg=black
highlight TabLineSel    ctermfg=white       ctermbg=black


"------------------------------------------------------------------------------
"   line number
"------------------------------------------------------------------------------
set number
set numberwidth=4
set cpoptions+=n
highlight LineNr        ctermfg=yellow      ctermbg=black


"------------------------------------------------------------------------------
"   folding
"------------------------------------------------------------------------------
set foldenable
set foldmarker={,}
" set foldmethod=marker
set foldmethod=syntax
set foldlevel=1000
set foldcolumn=4
highlight Folded        ctermfg=Cyan        ctermbg=Black
highlight FoldColumn    ctermfg=Cyan        ctermbg=Black
set foldtext=SimpleFoldText() " Custom fold text function
" au BufNewFile,BufRead *.v          source ~/.vim/vfold.vim


"------------------------------------------------------------------------------
"   status bar
"------------------------------------------------------------------------------
set laststatus=2 " alway shot status line
" set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
highlight StatusLine    ctermfg=Blue        ctermbg=white
highlight StatusLineNC  ctermfg=white       ctermbg=black


"------------------------------------------------------------------------------
"   cursor
"------------------------------------------------------------------------------
highlight Cursor        ctermfg=Black       ctermbg=Green       cterm=bold
" set cursorline
" highlight CursorLine   cterm=bold
" highlight CursorLine   cterm=underline
" set cursorcolumn
" highlight CursorColumn ctermfg=Brown


"------------------------------------------------------------------------------
"   search
"------------------------------------------------------------------------------
set hlsearch
set incsearch
" set ignorecase
" set smartcase
highlight Search        ctermfg=Black       ctermbg=DarkRed     cterm=NONE


"------------------------------------------------------------------------------
"   theme
"------------------------------------------------------------------------------
highlight Normal        ctermfg=LightGrey
highlight Visual                            ctermbg=Black       cterm=reverse
highlight Special       ctermfg=Brown
highlight Comment       ctermfg=Blue
highlight Statement     ctermfg=Yellow                          cterm=NONE
highlight Type                                                  cterm=NONE

" omni "
highlight Pmenu         ctermfg=Black       ctermbg=Magenta


"------------------------------------------------------------------------------
"   NerdTree
"------------------------------------------------------------------------------
" auto open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" auto leave
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" no fancy char
let g:NERDTreeDirArrows=0


"------------------------------------------------------------------------------
"   
"------------------------------------------------------------------------------
"let g:closetag_html_style=1

"if has("cscope")
"    set csto=0
"    if filereadable("cscope.out")
"        cs add cscope.out  
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif
"    set cscopeverbose  
"    nmap <leader>c :tab split<CR>:cs find c <C-R>=expand("<cword>")<CR><CR>	
"endif

" OmniCppComplete
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
"let OmniCpp_MayCompleteDot = 1 " autocomplete after .
"let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
"let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
"



"------------------------------------------------------------------------------
"   function
"------------------------------------------------------------------------------

" folding"
function! SimpleFoldText()
    let linenum = v:foldend - v:foldstart - 1
    return getline(v:foldstart).' ... '.linenum.' lines ... } '
endfunction

" comment "
function! GetCommentStr()
    let cur_file = &filetype

    if (cur_file == "vim")
        return "\""
    elseif (cur_file == "c" || cur_file == "cpp" || cur_file == "javascript")
        return "//"
    endif

    return "#"
endfunction

function! GetBlockCommentStartStr()
    let cur_file = &filetype

    if (cur_file == "html" || cur_file == "javascript")
        return "<!--"
    endif

    return "/*"
endfunction

function! GetBlockCommentEndStr()
    let cur_file = &filetype

    if (cur_file == "html" || cur_file == "javascript")
        return "-->"
    endif

    return "*/"
endfunction

function! MakeAsComment() range
    let line_ul = line("'<")
    let col_ul  = virtcol("'<")
    let line_lr = line("'>")
    let col_lr  = virtcol("'>")

    let start_str = GetBlockCommentStartStr()
    let end_str = GetBlockCommentEndStr()
    "let start_str = "/*"
    "let end_str = "*/"

    call cursor( line_lr, col_lr )
    execute "normal A " . end_str
    call cursor( line_ul, col_ul )
    execute "normal I" . start_str . " "
    execute "normal za"
endfunction

function! MakeMultiLineComment() range
    let comment_str = GetCommentStr()
    "let cur_file = &filetype
    "let l:comment_str = "//"
    "if (cur_file == "vim")
    "    let l:comment_str = "\""
    "elseif (cur_file == "conf")
    "    let l:comment_str = "#"
    "elseif (cur_file == "perl")
    "    let l:comment_str = "#"
    "elseif (cur_file == "python")
    "    let l:comment_str = "#"
    "elseif (cur_file == "csh")
    "    let l:comment_str = "#"
    "elseif (cur_file == "gdb")
    "    let l:comment_str = "#"
    "elseif (cur_file == "cpf")
    "    let l:comment_str = "#"
    "elseif (cur_file == "upf")
    "    let l:comment_str = "#"
    "endif

    let line_u = line("'<")
    let line_l = line("'>")
    let col_n = col(".")
    call cursor( line_u, col_n )
    execute "normal ^"
    let col_n = col(".")

    while line_u <= line_l
        call cursor( line_u, col_n )
        execute "normal ^"
        let col_cur = col(".")
        if (col_cur >= col_n)
            call cursor( line_u, col_n )
            execute "normal i" . comment_str
        endif
        let line_u = line_u + 1
    endwhile
endfunction

"function! MakeLineComment(c)
"    let line = line(".")
"    let col = a:c
"    call cursor( line, col )
"    execute "normal i//"
"endfunction


function! AddHeader()
    let curLine = line(".")
    let comment_str = GetCommentStr()
    call append(curLine + 0, comment_str . "------------------------------------------------------------------------------")
    call append(curLine + 1, comment_str . "   ")
    call append(curLine + 2, comment_str . "------------------------------------------------------------------------------")

    call cursor(curLine + 2, 0)
    "let curLine = line(".")
    "let cur_file = &filetype
    "if (cur_file == "vim")
    "    call append(curLine + 0, "\"------------------------------------------------------------------------------")
    "    call append(curLine + 1, "\"   ")
    "    call append(curLine + 2, "\"------------------------------------------------------------------------------")
    "elseif (cur_file == "cpf" || cur_file == "upf")
    "    call append(curLine + 0, "#------------------------------------------------------------------------------")
    "    call append(curLine + 1, "#   ")
    "    call append(curLine + 2, "#------------------------------------------------------------------------------")
    "else
    "    call append(curLine + 0, "//------------------------------------------------------------------------------")
    "    call append(curLine + 1, "//   ")
    "    call append(curLine + 2, "//------------------------------------------------------------------------------")
    "endif
endfunction

"nmap <leader>i :call AddIf()<CR><ESC>
"function! AddIf()
"    "let line_ul = line("'<")
"    "let col_ul  = virtcol("'<")
"    "let line_lr = line("'>")
"    "let col_lr  = virtcol("'>")
"    "execute "normal i if () {}"
"    "let curLine = line(".")
"    "let curCol = col(".")
"    "call append(curLine + 0, "QQ ". curLine . "-" . curCol)
"    "call cursor( curLine+1, curCol )
"    "execute "normal i }"
"    "execute "normal A */"
"    "call cursor( line_ul, col_ul )
"    "call cursor( curLine, curCol )
"    "execute "normal I/* "
"    "execute "normal za"
"endfunction
