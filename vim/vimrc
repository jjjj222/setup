"------------------------------------------------------------------------------
"   vundle
"------------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
"set rtp+=~/.vim/bundle/vundle
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" :PluginInstall
" :PluginUpdate

" Nerd Tree
Plugin 'scrooloose/nerdtree'

" vimux
Plugin 'benmills/vimux'

" surround"
Plugin 'tpope/vim-surround'
" ysiw] : add ]
" cs' : change the '
" ds' : remove the '
" S : visual mode

" repeat "
Plugin 'tpope/vim-repeat'

" tabular "
Plugin 'godlygeek/tabular'
" :Tab /:
" :Tab /:\zs

" rails
"Plugin 'tpope/vim-rails'
" :Econtroller

" git
Plugin 'tpope/vim-fugitive'


" jsx highlight
Plugin 'mxw/vim-jsx'

" pug highlight
Plugin 'digitaltoad/vim-pug'

" asyncrun
Plugin 'skywind3000/asyncrun.vim'

" yaml folding
Plugin 'digitalrounin/vim-yaml-folds'

" xml folding
"Plugin 'XML-Folding'

" auto-pairs
"Plugin 'jiangmiao/auto-pairs'

" typescript
Plugin 'leafgarland/typescript-vim'

" JSON
Plugin 'elzr/vim-json'

" All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"------------------------------------------------------------------------------
"   start
"------------------------------------------------------------------------------
syntax on
"filetype on
filetype plugin on
"set omnifunc=syntaxcomplete#Complete
"set completeopt-=preview

" disable auto comment
"set formatoptions-=cro
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"disable modeline"
set modelines=0

set nocompatible
"let tagsvector=$NVDEV."/nvtools/cad/cadlib/vector/tags"
"let &tagsvector=$NVDEV."/nvtools/cad/cadlib/vector/tags"
"let &tagsbasic=$NVDEV."/nvtools/cad/cadlib/basic/tags"
"set tags=&tagsvector,&tagsbasic
let &tags=$NVDEV."/nvtools/cad/cadlib/vector/tags"
\    .",".$NVDEV."/nvtools/cad/cadlib/basic/tags"
\    .",".$NVDEV."/nvtools/cad/cadlib/orcl/tags"
set backspace=indent,eol,start
set whichwrap+=<,>,[,],h,l
set history=50
set tabpagemax=100
"set visualbell t_vb=    " turn off error beep/flash
"set novisualbell    " turn off visual bell

" auto complete for file name "
set wildmode=longest,list
set wildmenu

" auto wrap "
"set nowrap
set tw=0

" tabnew autocomplete case insensitive
set wildignorecase

"-------------------------------------------------------------------------------
"   
"-------------------------------------------------------------------------------
set makeprg=make\ -j\ 8\ install\ NO_PERFORCE=1\ STRIP=\ NO_OPT=1

"-------------------------------------------------------------------------------
"   paste
"-------------------------------------------------------------------------------
set pastetoggle=<F6>

"-------------------------------------------------------------------------------
"   wrap
"-------------------------------------------------------------------------------
"set wrap
"let &showbreak='+ '
"set cpo=n

"------------------------------------------------------------------------------
"   mouse
"------------------------------------------------------------------------------
"set mouse=a
"noremap <LeftMouse> <nop>
"noremap <RightMouse> <nop>
"noremap <MiddleMouse> <nop>

"------------------------------------------------------------------------------
"   
"------------------------------------------------------------------------------
if has('persistent_undo')
    "set undofile
    set undodir=~/.vim_tmp/undo//
endif
set backupdir=~/.vim_tmp/backup//
set directory=~/.vim_tmp/swp//
set viminfo+=n~/.vim_tmp/viminfo
"set clipboard=unnamed

"-------------------------------------------------------------------------------
"   
"-------------------------------------------------------------------------------
command! -nargs=1 Silent
\ | execute ':silent !'.<q-args>
\ | execute ':redraw!'
"------------------------------------------------------------------------------
"   maps
"------------------------------------------------------------------------------
" enhance map "
let mapleader = ","

"nnoremap    <C-g>           :tab split<CR> :Grep <cword> *.* src/*.* include/*.*<CR>
nnoremap    <C-g>           :tab split<CR> :Grep -w <cword> *.js <CR>
"nnoremap    <C-h>           :tab split<CR> :Grep <cword> *.h<CR>
"nnoremap    <C-f>       <ESC>
"vnoremap    <C-f>       <ESC>
"inoremap    <C-f>       <ESC>
"nnoremap <C-d> ^<C-v>
" nnoremap <leader>g :Grep <cword> %<CR>
"copen
nnoremap    <F10>           :call asyncrun#quickfix_toggle(8)<CR>
nnoremap    <F11>           :cnext<CR>
nnoremap    <F12>           :cprev<CR>

"nnoremap <F9> :TlistToggle<CR>
"nnoremap    <F9>        :VCSAnnotate<CR>
"nnoremap    <F9>            :NERDTreeToggle<CR>
"nnoremap    <F9>            :call asyncrun#quickfix_toggle(8)<CR>

nnoremap    <leader>o       <C-w>gf
nnoremap    <leader>O       :tabnew <cWORD><CR>
nnoremap    <leader>lm      :marks<CR>
nnoremap    <leader>lr      :reg<CR>

" comment "
vnoremap    <C-d>           :call MakeAsComment()<CR><ESC>
vnoremap    <C-g>           :call MakeMultiLineComment()<CR><ESC>
vnoremap    <leader>ch      :call CommentOutLine("<!--", "-->")<CR><ESC>
"vnoremap    <leader>u       :call undocommentoutline()<cr><esc>

" plain text"
nnoremap    <leader>ah      :call AddHeader()<CR><ESC>
nnoremap    <leader>al      :call AddHorizontalLine()<CR><ESC>
"nnoremap    <leader>d       A // TODO<ESC>

"nnoremap    +               m`O<ESC>``
"nnoremap    -               ddp
"nnoremap    _               ddkkp
"inoremap    <C-d>           <ESC>ddi
inoremap    <C-p>           <ESC>Pi
"nnoremap    <leader>"       viw<esc>a"<esc>hbi"<esc>lel
nnoremap    <leader><TAB>   wi<TAB><ESC>
onoremap    in(             :<c-u>normal! f(vi(<cr>
onoremap    il(             :<c-u>normal! F)vi(<cr>
nnoremap    <leader>j       J
vnoremap    <leader>j       J
nnoremap    <leader>w       W
"nnoremap    <leader>w$      bi$<ESC>ei$<ESC>

"hex "
nnoremap    <leader>fx      :%! xxd<cr>
nnoremap    <leader>fj      :%! python -m json.tool<cr>
nnoremap    <leader>fs      :%! js-beautify<cr>

vnoremap    s               <nop>
"vnoremap    u               <ESC>u

" moving "
inoremap    jk              <ESC>
inoremap    JK              <ESC>
inoremap    kj              <ESC>
inoremap    KJ              <ESC>
vnoremap    <space>         <ESC>
"inoremap    <esc>           <nop>
"nnoremap    <right>         <nop>
"nnoremap    <left>          <nop>
"nnoremap    <up>            <nop>
"nnoremap    <down>          <nop>
"nnoremap    <C-j>           L
"nnoremap    <C-k>           H
nnoremap    j               gj
nnoremap    k               gk
"nnoremap    <C-j>           <C-e>
"vnoremap    <C-j>           <C-e>
"nnoremap    <C-k>           <C-y>
"vnoremap    <C-k>           <C-y>
nnoremap    <C-j>           :tnext<CR>
nnoremap    <C-k>           :tprev<CR>
nnoremap    <C-h>           <C-t>
nnoremap    <C-l>           <C-]>
"nnoremap    <C-j>           <C-f>
"vnoremap    <C-j>           <C-f>
"nnoremap    <C-k>           <C-b>
"vnoremap    <C-k>           <C-b>
"nnoremap    <C-l>           L
"vnoremap    <C-l>           L
"nnoremap    <C-h>           H
"vnoremap    <C-h>           H
nnoremap    <C-d>           <nop>
nnoremap    <C-f>           <nop>
vnoremap    <C-f>           <nop>
"nnoremap    <C-d>           :q<CR>
"nnoremap    <C-l>           <C-f>
"nnoremap    <C-h>           <C-b>
"nnoremap    <C-l>           H
"nnoremap    <C-h>           L
"nnoremap    J               L
"nnoremap    K               H
nnoremap    K               10k
vnoremap    K               10k
nnoremap    J               10j
vnoremap    J               10j
"nnoremap    H               g^
"nnoremap    L               g$
nnoremap    L               <C-b>
vnoremap    L               <C-b>
nnoremap    H               <C-f>
vnoremap    H               <C-f>

inoremap    <C-e>           <C-o>A
inoremap    <C-a>           <C-o>I

" save "
nnoremap    <C-s>           :w<CR>
inoremap    <C-s>           <ESC>:w<CR>
vnoremap    <C-s>           <ESC>:w<CR>

" copy/paste "
"vnoremap    <C-c>           :w! ~/.vim_tmp/vim_clipboard<CR>
nnoremap    <C-v>           :r ~/.vim_tmp/vim_clipboard<CR>
"vnoremap    <C-x>           :!pbcopy<CR>
if ($USER == "jtso")
    vnoremap    <C-c>           :w! ~/.vim_tmp/vim_clipboard<CR>
    vnoremap    <C-x>           :w! ~/.vim_tmp/vim_clipboard<CR>
else
    vnoremap    <C-c>           :w! ~/.vim_tmp/vim_clipboard<CR>gv:!pbcopy<CR>u
    vnoremap    <C-x>           :w! ~/.vim_tmp/vim_clipboard<CR>gv:!pbcopy<CR>
endif

" tabpage "
nnoremap    <leader>lt      :tabs<CR>
nnoremap    <leader>ts      :tab split<CR>
nnoremap    Q               :tabpre<CR>
nnoremap    W               :tabnext<CR>
nnoremap    <leader>tm0     :tabm0<CR>
nnoremap    <leader>tm1     :tabm1<CR>
nnoremap    <leader>tm2     :tabm2<CR>
nnoremap    <leader>tm3     :tabm3<CR>
nnoremap    <leader>tm4     :tabm4<CR>
nnoremap    <leader>tm5     :tabm5<CR>
nnoremap    <leader>tm6     :tabm6<CR>
nnoremap    <leader>tm7     :tabm7<CR>
nnoremap    <leader>tm8     :tabm8<CR>
nnoremap    <leader>tm9     :tabm<CR>

" ctags "
nnoremap    <C-\>           :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" folding "
nnoremap    <F1>            :set foldlevel=0<CR>
nnoremap    <F2>            :set foldlevel=1<CR>
nnoremap    <F3>            :set foldlevel=2<CR>
nnoremap    <F4>            :set foldlevel=100<CR>
"nnoremap    <F5>            :set foldlevel=100<CR>

" nerd tree "
nnoremap    <C-n>           :NERDTreeToggle<CR>
augroup nerd_tree_hotkey
    "Can't use nnoremap here
    autocmd!
    autocmd FileType nerdtree nmap <buffer> <CR>        go
    autocmd FileType nerdtree nmap <buffer> <right>     o
    autocmd FileType nerdtree nmap <buffer> <left>      o
    autocmd FileType nerdtree nmap <buffer> l           o
    autocmd FileType nerdtree nmap <buffer> h           o
augroup END

" asyncrun "
nnoremap    <leader>mk      :AsyncRun -program=make<CR>
nnoremap    <leader>ms      :AsyncStop<CR>
nnoremap    <leader>mo      :call asyncrun#quickfix_toggle(8)<CR>

" vimux "
"nnoremap    <leader>mk      :VimuxRunCommand "make"<CR>
nnoremap    <F8>            :VimuxRunCommand "make"<CR>
"nnoremap    <C-c>           :VimuxRunCommand "make"<CR>
"nnoremap    <leader>mr      :VimuxRunCommand "make run"<CR>
nnoremap    <F7>            :VimuxRunCommand "make run"<CR>
"nnoremap    <leader>mt      :VimuxRunCommand "make test"<CR>
"nnoremap    <F6>            :VimuxRunCommand "make test"<CR>
"nnoremap    <leader>mc      :VimuxCloseRunner<CR>

" indent "
"nnoremap    <Tab>           I<Tab><ESC>l
nnoremap    <Tab>           heT<space>i<Tab><ESC>l
"nnoremap    <S-Tab>         <<
vnoremap    <Tab>           >gv
vnoremap    <S-Tab>         <gv
noremap     <C-i>           <Tab>

" paste "
"nnoremap    <leader>po      :set paste<CR>
"nnoremap    <leader>pf      :set nopaste<CR>
nnoremap    <leader>p       "*p

" align"
vnoremap    <leader>a&      :Tab /&<CR>
vnoremap    <leader>a=      :Tab /=<CR>
vnoremap    <leader>a\|     :Tab /\|<CR>
nnoremap    <leader>ac      :1,$Tab /--><CR>

" external "
nnoremap    <leader>xc      :Silent open -a "Google Chrome" '%:p'<cr>
nnoremap    <leader>xx      :VimuxRunCommand ""<LEFT>
"nnoremap    <leader>xp      :<C-p><CR>

" vimrc "
nnoremap    <leader>e       :tabnew $MYVIMRC<CR>
nnoremap    <leader>ee      :tabnew $MYVIMRC<CR>
nnoremap    <leader>ss      :source $MYVIMRC<CR>
nnoremap    <leader>er      :tabnew ~/.vimrc_recent<CR>
nnoremap    <leader>sr      :source ~/.vimrc_recent<CR>
nnoremap    <leader>ea      :execute "tabnew ~/.vim/after/ftplugin/" . &filetype . ".vim"<CR>
nnoremap    <leader>sa      :execute "source ~/.vim/after/ftplugin/" . &filetype . ".vim"<CR>

" split "
nnoremap    <leader>vs      :vsplit<CR><C-w>w
nnoremap    <leader>hs      :split<CR><C-w>w

" reload "
nnoremap    <leader>r       :edit<CR>

nnoremap    <leader>$       viwS$

" perforce "
"set autoread
nnoremap    <leader>4e      :Silent p4 edit %<CR> :e<CR>
nnoremap    <leader>4r      :Silent p4 revert %<CR> :e<CR>

" vimdiff"
vnoremap    <leader>dp      :diffput<CR>
vnoremap    <leader>dg      :diffget<CR>

" hightlight"
nnoremap <silent> <leader>/ :nohlsearch<CR>:syntax sync fromstart<CR>

" preload"
let @f="$xo{\n\n}ki\t"

"-------------------------------------------------------------------------------
"   autocomplete
"-------------------------------------------------------------------------------
"inoremap { {}<ESC>i
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"inoremap ' ''<ESC>i
"inoremap " ""<ESC>i

"------------------------------------------------------------------------------
"   <leader>
"------------------------------------------------------------------------------
" a : add (h: header, l: line), align(&, |)
" b
" c : comment (h: html)
" d
" e : edit (e: vimrc, r: recent, a: after)
" f : format (j: json, x: hex)
" g
" h : horizental (s: split)
" i
" j : J
" k
" l : list (m: marks, r: regs, t: tabs)
" m : make (k: make, r: run, t: test)
" n
" o : open
" p : paste (o: on, f: off)
" q
" r : reload
" s : source (s: vimrc, r: recent, a: after)
" t : tab (s: split, m: move)
" u
" v : vertical (s: split)
" w : W
" x : external
" y
" z
" / : clear highlight search

"------------------------------------------------------------------------------
"   tab/space
"------------------------------------------------------------------------------
set expandtab
set tabstop=4
set shiftwidth=4
"set softtabstop=4
highlight Tab           ctermbg=blue
highlight TrailingSpace ctermbg=red
match Tab /\t/
2match TrailingSpace /\s\+$/

augroup match_white_space
    autocmd BufWinEnter * match Tab /\t/
    autocmd BufWinEnter * 2match TrailingSpace /\s\+$/
augroup END
"match
"match TrailingSpace /\s\+$/
"filetype on
"filetype indent on
"set autoindent
"------------------------------------------------------------------------------
"   filetype setup
"------------------------------------------------------------------------------
augroup file_type_setup
    autocmd!
    autocmd BufRead,BufNewFile cshrc        set filetype=csh
    autocmd BufRead,BufNewFile cshrc_prompt set filetype=csh
    autocmd BufRead,BufNewFile cshrc_precmd set filetype=csh
    autocmd BufRead,BufNewFile *.cshrc      set filetype=csh
    autocmd BufRead,BufNewFile gdbinit      set filetype=gdb
    autocmd BufRead,BufNewFile vim_recent   set filetype=vim
    autocmd BufRead,BufNewFile *.gdb        set filetype=gdb
    autocmd BufRead,BufNewFile *.cpf        set filetype=cpf
    autocmd BufRead,BufNewFile *.upf        set filetype=upf
    autocmd BufRead,BufNewFile *.md         set filetype=markdown
    autocmd BufRead,BufNewFile *.cls        set filetype=tex
    autocmd BufRead,BufNewFile *.tn         set filetype=tcl
    autocmd BufRead,BufNewFile *.atelib     set filetype=tcl
    autocmd BufRead,BufNewFile .babelrc     set filetype=json
    autocmd BufRead,BufNewFile *.jrd        set filetype=xml
    autocmd BufRead,BufNewFile *.conf       set filetype=conf
augroup END


"------------------------------------------------------------------------------
"   tabpage
"------------------------------------------------------------------------------
set showtabline=2 " always show
"set guitablabel=%t " name only
highlight TabLineFill   ctermfg=black       ctermbg=black
highlight TabLineSel    ctermfg=white       ctermbg=black
if ($TERM == "xterm-color")
    highlight TabLine       ctermfg=yellow      ctermbg=black
else
    highlight TabLine       ctermfg=darkgrey    ctermbg=black
endif


"------------------------------------------------------------------------------
"   line number
"------------------------------------------------------------------------------
set number
set numberwidth=4
set cpoptions+=n
"highlight LineNr        ctermfg=yellow      ctermbg=black
highlight LineNr        ctermfg=yellow      ctermbg=black


"------------------------------------------------------------------------------
"   folding
"------------------------------------------------------------------------------
set foldenable
set foldmarker={,}
"set foldmethod=marker
set foldmethod=syntax
"set foldmethod=indent
set foldlevel=1000
set foldcolumn=6
highlight Folded        ctermfg=Cyan        ctermbg=Black
highlight FoldColumn    ctermfg=Cyan        ctermbg=Black
set foldtext=SimpleFoldText() " Custom fold text function
" au BufNewFile,BufRead *.v          source ~/.vim/vfold.vim

augroup XML
    autocmd!
    autocmd FileType xml setlocal foldmethod=syntax foldlevelstart=999 foldminlines=0
augroup END


"------------------------------------------------------------------------------
"   status bar
"------------------------------------------------------------------------------
let g:normal_statusline='%<%f %y %h%m%r%=%-18.(%l/%L,%c%V%) %P'
set laststatus=2 " alway shot status line
" set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set statusline=%<%f\ %y\ %h%m%r%=%-18.(%l/%L,%c%V%)\ %P
"set statusline=%!g:normal_statusline
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
highlight StatusLine    ctermfg=Blue        ctermbg=white
highlight StatusLineNC  ctermfg=white       ctermbg=black


"------------------------------------------------------------------------------
"   cursor
"------------------------------------------------------------------------------
set cursorline

highlight Cursor        ctermfg=Black       ctermbg=Green       cterm=bold
"highlight Cursor        ctermfg=Black       ctermbg=White       cterm=bold
"highlight Cursor        ctermfg=Black       ctermbg=LightGrey   cterm=bold
highlight MatchParen    ctermfg=Black       ctermbg=Brown       cterm=NONE
"highlight MatchParen    ctermfg=Black       ctermbg=White       cterm=NONE
" highlight CursorLine   cterm=bold
" highlight CursorLine   cterm=underline
" set cursorcolumn
" highlight CursorColumn ctermfg=Brown

"highlight CursorLine    ctermfg=greens
"highlight CursorLineNR  ctermfg=green      ctermbg=black cterm=bold


"------------------------------------------------------------------------------
"   search
"------------------------------------------------------------------------------
set hlsearch
set incsearch
" set ignorecase
" set smartcase
highlight Search        ctermfg=Black       ctermbg=DarkRed     cterm=NONE


"------------------------------------------------------------------------------
"   theme
"------------------------------------------------------------------------------
"set background=dark
highlight Normal        ctermfg=LightGrey
"highlight NonText       ctermfg=Red
highlight Visual                            ctermbg=Black       cterm=reverse
highlight Special       ctermfg=Brown
highlight Comment       ctermfg=Blue
highlight Statement     ctermfg=Yellow                          cterm=NONE
highlight Type                                                  cterm=NONE

"------------------------------------------------------------------------------
"   popup menu
"------------------------------------------------------------------------------
highlight Pmenu         ctermfg=Black       ctermbg=Magenta


"------------------------------------------------------------------------------
"   NerdTree
"------------------------------------------------------------------------------
augroup nerd_tree_setup
    autocmd!
    " auto open
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

    " auto leave
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END

" no fancy char
let g:NERDTreeDirArrows=0


"------------------------------------------------------------------------------
"   NerdTree New Version
"------------------------------------------------------------------------------
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
"let g:NERDTreeDirArrowCollapsible = '>'

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

"call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
"call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
"call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
"call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
"call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
"call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
"call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

"------------------------------------------------------------------------------
"   Vimux
"------------------------------------------------------------------------------
let g:VimuxHeight = "30"
let g:VimuxOrientation = "h"
"let g:VimuxRunnerType = "window"

"-------------------------------------------------------------------------------
"   Plugin 'elzr/vim-json'
"-------------------------------------------------------------------------------
let g:vim_json_syntax_conceal = 0

"------------------------------------------------------------------------------
"   
"------------------------------------------------------------------------------
"let g:closetag_html_style=1

"if has("cscope")
"    set csto=0
"    if filereadable("cscope.out")
"        cs add cscope.out  
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif
"    set cscopeverbose  
"    nnoremap <leader>c :tab split<CR>:cs find c <C-R>=expand("<cword>")<CR><CR>	
"endif

" OmniCppComplete
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
"let OmniCpp_MayCompleteDot = 1 " autocomplete after .
"let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
"let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
"



"------------------------------------------------------------------------------
"   function
"------------------------------------------------------------------------------

" folding"
function! SimpleFoldText()
    let linenum = v:foldend - v:foldstart - 1
    return getline(v:foldstart).' ... '.linenum.' lines ... } '
endfunction

" comment "
function! GetCommentStr()
    let cur_file = &filetype

    if (cur_file == "vim")
        return "\""
    elseif (cur_file == "tex")
        return "%"
    elseif (cur_file == "sql")
        return "--"
    elseif (cur_file == "haml")
        return "-#"
    elseif (cur_file == "lisp")
        return ";"
    elseif (cur_file == "c" || cur_file == "cpp" || cur_file == "lex" || cur_file == "yacc" || cur_file == "html")
        return "//"
    elseif (cur_file == "java" || cur_file == "javascript" || cur_file == "typescript" || cur_file == "javascript.jsx" || cur_file == "scss")
        return "//"
    elseif (cur_file == "dot")
        return "//"
    endif

    return "#"
endfunction

function! GetBlockCommentStartStr()
    let cur_file = &filetype

    if (cur_file == "html" || cur_file == "javascript")
        return "<!--"
    endif

    return "/*"
endfunction

function! GetBlockCommentEndStr()
    let cur_file = &filetype

    if (cur_file == "html" || cur_file == "javascript")
        return "-->"
    endif

    return "*/"
endfunction

function! CommentOutLine(start_str, end_str)
    "let line_ul = line("'<")
    "let col_ul  = virtcol("'<")
    "let line_lr = line("'>")
    "let col_lr  = virtcol("'>")

    "call cursor( line_lr, col_lr )
    execute "normal A " . a:end_str
    "call cursor( line_ul, col_ul )
    execute "normal I" . a:start_str . " "
    "execute "normal za"
endfunction

function! MakeAsComment() range
    let line_ul = line("'<")
    let col_ul  = virtcol("'<")
    let line_lr = line("'>")
    let col_lr  = virtcol("'>")

    let start_str = GetBlockCommentStartStr()
    let end_str = GetBlockCommentEndStr()

    if ((split(getline(line_ul), '\s')[0] == start_str) && (split(getline(line_lr), '\s')[-1] == end_str))
        call cursor( line_lr, col_lr )
        execute "normal dF x"
        call cursor( line_ul, col_ul )
        execute "normal ^df "
    else
        call cursor( line_lr, col_lr )
        execute "normal A " . end_str
        call cursor( line_ul, col_ul )
        execute "normal I" . start_str . " "


        "execute "normal za"
        "execute "normal A ~" . getline(line_ul) . "~"
        "execute "normal A ~" . split(getline(line_ul), '\s')[0] . "~"
        "execute "normal A ~" . split(getline(line_lr), " ")[-1] . "~"
    endif
endfunction

function! MakeMultiLineComment() range
    let comment_str = GetCommentStr()

    let line_u = line("'<")
    let line_l = line("'>")
    let col_n = col(".")
    call cursor( line_u, col_n )
    execute "normal ^"
    let col_n = col(".")

    while line_u <= line_l
        call cursor( line_u, col_n )
        execute "normal ^"
        let col_cur = col(".")
        if (col_cur >= col_n)
            call cursor( line_u, col_n )
            execute "normal i" . comment_str
        endif
        let line_u = line_u + 1
    endwhile
endfunction

function! GetSepLineStr()
    let comment_str = GetCommentStr()
    let additional_char = ""
    if (strlen(comment_str) == 1)
        let additional_char = "-"
    endif
    let char_78 = "------------------------------------------------------------------------------"
    return comment_str . additional_char . char_78
endfunction

function! AddHeader()
    let curLine = line(".")
    let comment_str = GetCommentStr()
    "let addition_char = ""
    "if (strlen(comment_str) == 1)
    "    let addition_char = "-"
    "endif
    let sep_line_str = GetSepLineStr()

    "call append(curLine + 0, comment_str . addition_char . sep_line_str)
    "call append(curLine + 1, comment_str . "   ")
    "call append(curLine + 2, comment_str . addition_char . sep_line_str)
    call append(curLine + 0, sep_line_str)
    call append(curLine + 1, comment_str . "   ")
    call append(curLine + 2, sep_line_str)

    call cursor(curLine + 2, 0)
endfunction

function! AddHorizontalLine()
    let curLine = line(".")
    "let comment_str = GetCommentStr()
    let sep_line_str = GetSepLineStr()
    "call append(curLine + 0, comment_str . sep_line_str)
    call append(curLine + 0, sep_line_str)

    call cursor(curLine + 1, 0)
endfunction

"-------------------------------------------------------------------------------
"   
"-------------------------------------------------------------------------------
function! IndentEnterInBrace()
    "let line = getline('.')
    "let col_n = col('.')
    "let c = 
    let c = getline('.')[col('.')-1]
    " Use with
    " set autoindent
    " inoremap <CR> <ESC>:call IndentEnterInBrace()<CR>
    "if (getline('.')[col('.')-1] == "{")
    if (c == "{" || c == "[")
        "if (col(".") == col("$")-1)
        "    let add_paren = 0
        "    if (getline('.')[col('.')-2] == "(")
        "        let add_paren = 1
        "    endif
        "    "execute "normal l\"_x"
        "    execute "normal o}"
        "    if (add_paren == 1)
        "        execute "normal a)"
        "    endif
        "    execute "normal Oq"
        "    execute "normal >>\"_x"
        "    call feedkeys("A", "n")
        "else
            call feedkeys("a", "n")
            call feedkeys("\<CR>", "n")
            call feedkeys("\<ESC>", "n")
            call feedkeys("O", "n")
            call feedkeys("\t", "n")
        "endif
    else
        call feedkeys("a", "n")
        call feedkeys("\<CR>", "n")
    endif
endfunction

"let b:has_auto_parenthesis = 0
"function! AutoParenthesisOpen()
"    "let b:has_auto_parenthesis = 1
"
"    call feedkeys("a", "n")
"    call feedkeys("(", "n")
"    call feedkeys(')', "n")
"    call feedkeys("\<ESC>", "n")
"    call feedkeys('i', "n")
"endfunction

function! AutoParenthesisClose()
    "let b:has_auto_parenthesis = 0

    let line = getline('.')
    let col_n = col('.')
    call feedkeys("a", "n")
    if (line[col_n] == ")" && line[col_n - 1] == "(")
        call cursor( line, col_n+1 )
    else
        call feedkeys(")", "n")
    endif
endfunction

"function! AutoCurlyBraceOpen()
"    call feedkeys("a", "n")
"    call feedkeys("{", "n")
"    call feedkeys('}', "n")
"    call feedkeys("\<ESC>", "n")
"    call feedkeys('i', "n")
"endfunction

function! AutoCurlyBraceClose()
    let line = getline('.')
    let col_n = col('.')
    call feedkeys("a", "n")
    if (line[col_n] == "}" && line[col_n - 1] == "{")
        call cursor( line, col_n+1 )
    else
        call feedkeys("}", "n")
    endif
endfunction

"function! AutoSquareBracketOpen()
"    call feedkeys("a", "n")
"    call feedkeys("[", "n")
"    call feedkeys(']', "n")
"    call feedkeys("\<ESC>", "n")
"    call feedkeys('i', "n")
"endfunction

function! AutoSquareBracketClose()
    let line = getline('.')
    let col_n = col('.')
    call feedkeys("a", "n")
    if (line[col_n] == "]" && line[col_n - 1] == "[")
        call cursor( line, col_n+1 )
    else
        call feedkeys("]", "n")
    endif
endfunction

function! RunBackSpace()
    let line = getline('.')
    let col_n = col('.')

    call feedkeys("a", "n")
    "call feedkeys("QQQ", "n")

    if (line[col_n] == ")" && line[col_n - 1] == "(")
        call feedkeys("\<DEL>", "n")
        "call feedkeys("x", "n")
    elseif (line[col_n] == "}" && line[col_n - 1] == "{")
        call feedkeys("\<DEL>", "n")
        "call feedkeys("x", "n")
    elseif (line[col_n] == "]" && line[col_n - 1] == "[")
        call feedkeys("\<DEL>", "n")
        "call feedkeys("x", "n")
    endif
    call feedkeys("\<BS>", "n")
    "call feedkeys("x", "n")
endfunction

"inoremap ( <ESC>:call AutoParenthesisOpen()<CR>
inoremap ( ()<Left>
inoremap ) <ESC>:call AutoParenthesisClose()<CR>
"inoremap { <ESC>:call AutoCurlyBraceOpen()<CR>
inoremap { {}<Left>
inoremap } <ESC>:call AutoCurlyBraceClose()<CR>
"inoremap [ <ESC>:call AutoSquareBracketOpen()<CR>
inoremap [ []<Left>
inoremap ] <ESC>:call AutoSquareBracketClose()<CR>
"inoremap <C-H> <ESC>:call RunBackSpace()<CR>


"------------------------------------------------------------------------------
"   after
"------------------------------------------------------------------------------
function! SourceVimAfter()
    let afterfile = $HOME . "/.vim/after/ftplugin/" . &filetype . ".vim"
    if filereadable(afterfile)
        exec "source " . afterfile
    endif
endfunction
call SourceVimAfter()

"if (&filetype == "make")
"    "set noexpandtab
"    source $HOME/.vim/after/ftplugin/make.vim
"endif
"
"if (&filetype == "cucumber")
"    source $HOME/.vim/after/ftplugin/cucumber.vim
"endif
"
"if (&filetype == "ruby")
"    source $HOME/.vim/after/ftplugin/ruby.vim
"endif
"
"if (&filetype == "haml")
"    source $HOME/.vim/after/ftplugin/haml.vim
"endif

"source $HOME/.vim/after/ftplugin/&filetype.vim
