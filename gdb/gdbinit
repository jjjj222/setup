#=================== my setting ==================================
set print pretty on
set print object on
set print static-members off
set confirm off
#set pagination off
#set print array on
#set tui border-kind ascii
#set tui active-border-mode bold
set disassembly-flavor intel
#set print vtbl on
#set print demangle on
#set demangle-style gnu-v3
#set print sevenbit-strings off

#-------------------------------------------------------------------------------
#   source 
#-------------------------------------------------------------------------------
source ~/.jjjj222_setup/gdb/stl/stl.gdb
#source ~/.jjjj222_setup/gdb/color.gdb

python
import sys
import os
path = os.path.expanduser('~/.jjjj222_setup/gdb');
path = os.path.realpath(path)
sys.path.insert(1, path)
import vimtrace
import prompt
#import hello
#import ls
end
#-------------------------------------------------------------------------------
#   hook
#-------------------------------------------------------------------------------
python
import gdb
class Executor:
    def __init__(self, cmd):
        self.__cmd = cmd

    def __call__(self):
        gdb.execute(self.__cmd)

def stop_handler (event):
    #print "QQ stop"
    #b =  event.breakpoint
    #print b.type
    #print b.number
    #print b.location
    #print b.expression
    #print b.condition
    try:
        frame = str(gdb.selected_frame().name())
    except:
        frame = "<no frame>"

    #print frame
    if "@plt" in frame:
        #print "plt"
        gdb.execute("continue")
        #gdb.post_event(Executor("continue"))
        #b.delete()
    #print "event type: exit"
    #print "exit code: %d" % (event.exit_code)

gdb.events.stop.connect (stop_handler)
#class DebugPrintingBreakpoint(gdb.Breakpoint):
#    def __init__(self, spec, command):
#        super(DebugPrintingBreakpoint, self).__init__(spec, gdb.BP_BREAKPOINT, internal = False)
#        self.command = command
#
#    def stop(self):
#        print "QQ"
#        return True
#
#DebugPrintingBreakpoint()
end
#-------------------------------------------------------------------------------
#define hook-step
#    echo hook-step
#    echo \n
#end
#
#define hook-next
#    echo hook-next
#    echo \n
#end
#
#define hookpost-next
#    echo hookpost-next
#    echo \n
#    ls
#    #vimtracealign
#end
#
#define hook-continue
#    echo hook-continue
#    echo \n
#end
#
#define hook-finish
#    echo hook-finish
#    echo \n
#end

define hook-quit
    vimtraceexit
end
#-------------------------------------------------------------------------------
#   
#-------------------------------------------------------------------------------
set listsize 20
define ls
    if ( $argc == 0)
        list *$pc
    else
        set listsize $arg0
        list *$pc
        set listsize 20
    end
end

define ll
    ls 60
end

#define dump
#    call $arg0.dump()
#end

define cto
    tb $arg0
    commands
        silent
    end
    continue
end

define goto
    tb $arg0
    jump $arg0
end

define binary_mode
    layout asm
    layout reg
    winheight reg -5
end

define show_esp
    if ( $argc == 0)
        x/16xw $esp
    else
        x/16xw $esp - $arg0*4
    end
end

define show_ebp
    x/16xw $ebp - 16*4
    x/1xw $ebp
    x/16xw $ebp
end

#------------------------------------------------------------------------------
#   command
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#   tmp
#------------------------------------------------------------------------------
define cache_dump
    call cache_dump(cp, stdout)
end

#-------------------------------------------------------------------------------
#   pretty-print stl (included)
#-------------------------------------------------------------------------------
python
import sys
import os
path = os.path.expanduser('~/.jjjj222_setup/gdb/pretty_printer/stl');
path = os.path.realpath(path)
sys.path.insert(1, path)
from libstdcxx.v6.printers import register_libstdcxx_printers
register_libstdcxx_printers (None)
end


#-------------------------------------------------------------------------------
#   pretty-print boost (included)
#-------------------------------------------------------------------------------
python
import sys
path = os.path.expanduser('~/.jjjj222_setup/gdb/pretty_printer/boost/Boost-Pretty-Printer')
path = os.path.realpath(path)
sys.path.insert(1, path)
import boost
boost.register_printers(boost_version=(1,58,0))
end


